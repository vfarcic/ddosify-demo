---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: pinger
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: pinger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pinger
    spec:
      containers:
      - image: ghcr.io/vfarcic/silly-demo:1.4.109
        livenessProbe:
          httpGet:
            path: /
            port: 8080
        name: pinger
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: pinger
  name: pinger
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: pinger
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: pinger
  name: pinger
spec:
  ingressClassName: traefik
  rules:
  - host: sillydemo.127.0.0.1.nip.io
    http:
      paths:
      - backend:
          service:
            name: pinger
            port:
              number: 8080
        path: /
        pathType: ImplementationSpecific
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: silly-demo
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: silly-demo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: silly-demo
    spec:
      containers:
      - env:
        - name: DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: host
              name: silly-demo-app
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: silly-demo-app
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: silly-demo-app
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: silly-demo-app
        - name: DB_NAME
          value: app
        image: ghcr.io/vfarcic/silly-demo:1.4.109
        livenessProbe:
          httpGet:
            path: /
            port: 8080
        name: silly-demo
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: silly-demo
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: silly-demo
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: silly-demo
spec:
  ingressClassName: traefik
  rules:
  - host: sillydemo.127.0.0.1.nip.io
    http:
      paths:
      - backend:
          service:
            name: silly-demo
            port:
              number: 8080
        path: /
        pathType: ImplementationSpecific
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: silly-demo
spec:
  maxReplicas: 6
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 80
        type: AverageValue
    type: Resource
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: silly-demo
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  labels:
    app.kubernetes.io/name: silly-demo
  name: silly-demo
spec:
  instances: 1
  storage:
    size: 1Gi
---
apiVersion: db.atlasgo.io/v1alpha1
kind: AtlasSchema
metadata:
  name: silly-demo-videos
spec:
  credentials:
    scheme: postgres
    host: silly-demo-rw.a-team
    port: 5432
    user: app
    passwordFrom:
      secretKeyRef:
        key: password
        name: silly-demo-app
    database: app
    parameters:
      sslmode: disable
  schema:
    sql: |
      create table videos (
        id varchar(50) not null,
        title text,
        description text,
        primary key (id)
      );
